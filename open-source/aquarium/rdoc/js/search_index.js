var search_data = {"index":{"searchIndex":["aquarium","aspects","advice","advicechainnode","advicechainnodefactory","afteradvicechainnode","afterraisingadvicechainnode","afterreturningadvicechainnode","aroundadvicechainnode","aspect","beforeadvicechainnode","dsl","aspectdsl","defaultobjectshandler","exclusionhandler","joinpoint","context","contextnotcorrectlydefined","proceedmethodnotavailable","noadvicechainnode","pointcut","bar","barmodule","classwithstateandbehavior","dsl","dslmethods","echo","exception1","exception2","extensions","hashhelper","regexphelper","extras","designbycontract","contracterror","finders","finderresult","methodfinder","pointcutfinder","poincutfinderresult","typefinder","typefinderresult","foo","invarcond","invarcondexample","logmodule","newexception","postcond","postcondexample","precond","precondexample","raiser","reusables","tracemethods","typefinderintroductionexamplemodule","typefinderintroductionexampletargetclass1","typefinderintroductionexampletargetclass2","typefinderintroductionexampletargetmodule1","typefinderintroductionexampletargetmodule2","utils","aquarium","utils","aquarium","utils","nilobject","arrayutils","camelcase","defaultlogger","hashutils","htmlescaper","invalidoptions","logicerror","methodutils","nameutils","optionsutils","classmethods","setutils","typeutils","version","hash","nottraced1","nottraced2","object","regexp","set","traced1","traced2","&()","&()","&()","-()","-()","<<()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","===()","===()","action()","action()","action()","action()","add_ancestors_descendents_and_nested_option_variants_for()","add_exclude_options_for()","add_prepositional_option_variants_for()","advice_invoked?()","advice_wrapper()","advice_wrapper()","advice_wrapper()","advice_wrapper()","advice_wrapper()","advice_wrapper()","advise()","all_excluded_pointcuts()","all_methods_specified?()","all_recognized_method_option_symbols()","and()","and()","and()","any_type_related_options_given?()","append_features()","append_features()","append_features()","append_features()","append_matched()","append_not_matched()","assert_valid()","bad_action()","bad_action()","bad_attributes()","boolean_compare()","build_tag()","call()","call_advice()","canonical_option_accessor()","canonical_option_reader()","canonical_option_writer()","canonical_options_given_methods()","class_method?()","class_or_instance_method_flag()","compare_advice_kinds()","compare_field()","convert_to_set()","debug_backtraces()","debug_backtraces=()","default_objects_given()","default_objects_given?()","definer()","descendents()","disable_all()","do_descendents()","do_it()","do_something_else()","doit()","doit()","doit()","doit()","dup()","each()","each()","empty?()","empty?()","empty?()","empty?()","enable_all()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql_when_keys_compared?()","equivalent_key()","escape()","escape()","exists?()","find()","find()","find()","find_method()","finish_specification_initialization()","found_pointcuts()","good_action()","good_action()","handle_call_rescue()","has_method()","hashify()","ignore_warning()","init_method_options()","init_methods_specification()","init_specification()","inspect()","inspect()","inspect()","inspect()","inspect()","instance_method()","instance_method?()","intersection()","intersection()","intersection()","intersection_using_eql_comparison()","introduced_method()","invariant()","invoke_original_join_point()","invoke_original_join_point()","invoke_original_join_point()","is_excluded_join_point?()","is_excluded_method?()","is_excluded_pointcut?()","is_excluded_type_or_object?()","is_explicitly_excluded_method?()","is_recognized_method_option()","is_type?()","join_point_excluded?()","join_points_matched()","join_points_not_matched()","kinds()","last()","log()","logged_messages()","logged_messages()","logger()","logger=()","make_array()","make_array()","make_attribute_reading_writing_options()","make_hash()","make_node()","make_set()","make_type_or_object_key()","make_valid_attr_name_from_method_name()","make_valid_object_id_name()","make_valid_object_name()","make_valid_type_name()","match_all_methods()","matched_keys()","matches_excluded_method_regex?()","method_args_to_hash()","method_missing()","method_missing()","minus()","minus()","nested()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_attributes_specified?()","no_methods_specified?()","not_matched_keys()","or()","or()","or()","pointcut()","postcondition()","precondition()","proceed()","proceed()","raise_exception1()","raise_exception2()","reset_advice_invoked()","reset_current_context()","resolve_type()","respond_to?()","responds_to_ancestors?()","set_calculated_excluded_pointcuts()","size()","sort_by_priority_order()","strip()","strip_array_nils()","strip_array_nils()","strip_nil_keys()","strip_set_nils()","strip_set_nils()","target_type_or_object()","to_camel_case()","to_name()","to_s()","to_s()","to_s()","to_s()","to_s()","to_snake_case()","type_or_object()","unadvise()","unadvise_join_points()","union()","union()","union()","union_using_eql_comparison()","universal_options()","universal_prepositions()","update()","update_current_context()","use_default_objects_if_defined()","use_underscore_methods?()","valid()","validate_attribute_options()","validate_options()","visibility()","|()","|()","|()","changes","mit_license","readme","upgrade"],"longSearchIndex":["aquarium","aquarium::aspects","aquarium::aspects::advice","aquarium::aspects::advicechainnode","aquarium::aspects::advicechainnodefactory","aquarium::aspects::afteradvicechainnode","aquarium::aspects::afterraisingadvicechainnode","aquarium::aspects::afterreturningadvicechainnode","aquarium::aspects::aroundadvicechainnode","aquarium::aspects::aspect","aquarium::aspects::beforeadvicechainnode","aquarium::aspects::dsl","aquarium::aspects::dsl::aspectdsl","aquarium::aspects::defaultobjectshandler","aquarium::aspects::exclusionhandler","aquarium::aspects::joinpoint","aquarium::aspects::joinpoint::context","aquarium::aspects::joinpoint::contextnotcorrectlydefined","aquarium::aspects::joinpoint::proceedmethodnotavailable","aquarium::aspects::noadvicechainnode","aquarium::aspects::pointcut","aquarium::bar","aquarium::barmodule","aquarium::classwithstateandbehavior","aquarium::dsl","aquarium::dslmethods","aquarium::echo","aquarium::exception1","aquarium::exception2","aquarium::extensions","aquarium::extensions::hashhelper","aquarium::extensions::regexphelper","aquarium::extras","aquarium::extras::designbycontract","aquarium::extras::designbycontract::contracterror","aquarium::finders","aquarium::finders::finderresult","aquarium::finders::methodfinder","aquarium::finders::pointcutfinder","aquarium::finders::pointcutfinder::poincutfinderresult","aquarium::finders::typefinder","aquarium::finders::typefinder::typefinderresult","aquarium::foo","aquarium::invarcond","aquarium::invarcondexample","aquarium::logmodule","aquarium::newexception","aquarium::postcond","aquarium::postcondexample","aquarium::precond","aquarium::precondexample","aquarium::raiser","aquarium::reusables","aquarium::reusables::tracemethods","aquarium::typefinderintroductionexamplemodule","aquarium::typefinderintroductionexampletargetclass1","aquarium::typefinderintroductionexampletargetclass2","aquarium::typefinderintroductionexampletargetmodule1","aquarium::typefinderintroductionexampletargetmodule2","aquarium::utils","aquarium::utils::aquarium","aquarium::utils::aquarium::utils","aquarium::utils::aquarium::utils::aquarium","aquarium::utils::aquarium::utils::aquarium::utils","aquarium::utils::aquarium::utils::aquarium::utils::nilobject","aquarium::utils::arrayutils","aquarium::utils::camelcase","aquarium::utils::defaultlogger","aquarium::utils::hashutils","aquarium::utils::htmlescaper","aquarium::utils::invalidoptions","aquarium::utils::logicerror","aquarium::utils::methodutils","aquarium::utils::nameutils","aquarium::utils::optionsutils","aquarium::utils::optionsutils::classmethods","aquarium::utils::setutils","aquarium::utils::typeutils","aquarium::version","hash","nottraced1","nottraced2","object","regexp","set","traced1","traced2","aquarium::aspects::pointcut#&()","aquarium::extensions::hashhelper#&()","aquarium::finders::finderresult#&()","aquarium::extensions::hashhelper#-()","aquarium::finders::finderresult#-()","aquarium::finders::finderresult#<<()","aquarium::aspects::joinpoint#<=>()","aquarium::aspects::joinpoint::context#<=>()","aquarium::extensions::regexphelper#<=>()","aquarium::aspects::aspect#==()","aquarium::aspects::joinpoint#==()","aquarium::aspects::joinpoint::context#==()","aquarium::aspects::pointcut#==()","aquarium::finders::finderresult#==()","set#==()","aquarium::aspects::joinpoint#===()","aquarium::aspects::joinpoint::context#===()","aquarium::postcond#action()","aquarium::postcondexample#action()","aquarium::precond#action()","aquarium::precondexample#action()","aquarium::finders::typefinder::add_ancestors_descendents_and_nested_option_variants_for()","aquarium::utils::optionsutils::classmethods#add_exclude_options_for()","aquarium::utils::optionsutils::classmethods#add_prepositional_option_variants_for()","aquarium::reusables::tracemethods::advice_invoked?()","aquarium::aspects::afteradvicechainnode#advice_wrapper()","aquarium::aspects::afterraisingadvicechainnode#advice_wrapper()","aquarium::aspects::afterreturningadvicechainnode#advice_wrapper()","aquarium::aspects::aroundadvicechainnode#advice_wrapper()","aquarium::aspects::beforeadvicechainnode#advice_wrapper()","aquarium::aspects::noadvicechainnode#advice_wrapper()","aquarium::dslmethods#advise()","aquarium::aspects::exclusionhandler#all_excluded_pointcuts()","aquarium::aspects::pointcut#all_methods_specified?()","aquarium::finders::methodfinder::all_recognized_method_option_symbols()","aquarium::aspects::pointcut#and()","aquarium::extensions::hashhelper#and()","aquarium::finders::finderresult#and()","aquarium::aspects::pointcut#any_type_related_options_given?()","aquarium::aspects::dsl::aspectdsl::append_features()","aquarium::dsl::append_features()","aquarium::reusables::tracemethods::append_features()","aquarium::utils::optionsutils::append_features()","aquarium::finders::finderresult#append_matched()","aquarium::finders::finderresult#append_not_matched()","aquarium::aspects::joinpoint#assert_valid()","aquarium::invarcond#bad_action()","aquarium::invarcondexample#bad_action()","object#bad_attributes()","aquarium::aspects::joinpoint#boolean_compare()","aquarium::version::build_tag()","aquarium::aspects::advicechainnode#call()","aquarium::aspects::advicechainnode#call_advice()","aquarium::utils::optionsutils::classmethods#canonical_option_accessor()","aquarium::utils::optionsutils::classmethods#canonical_option_reader()","aquarium::utils::optionsutils::classmethods#canonical_option_writer()","aquarium::utils::optionsutils::classmethods#canonical_options_given_methods()","aquarium::aspects::joinpoint#class_method?()","aquarium::aspects::joinpoint#class_or_instance_method_flag()","aquarium::aspects::advice::compare_advice_kinds()","aquarium::aspects::joinpoint#compare_field()","aquarium::utils::setutils#convert_to_set()","aquarium::aspects::advice::debug_backtraces()","aquarium::aspects::advice::debug_backtraces=()","aquarium::aspects::defaultobjectshandler#default_objects_given()","aquarium::aspects::defaultobjectshandler#default_objects_given?()","aquarium::utils::methodutils::definer()","aquarium::utils::typeutils::descendents()","aquarium::extras::designbycontract::disable_all()","aquarium::utils::typeutils::do_descendents()","aquarium::foo#do_it()","aquarium::barmodule#do_something_else()","nottraced1#doit()","nottraced2#doit()","traced1#doit()","traced2#doit()","aquarium::aspects::joinpoint#dup()","aquarium::aspects::advicechainnode#each()","aquarium::finders::typefinder::typefinderresult#each()","aquarium::aspects::advicechainnode#empty?()","aquarium::aspects::pointcut#empty?()","aquarium::extensions::regexphelper#empty?()","aquarium::finders::finderresult#empty?()","aquarium::extras::designbycontract::enable_all()","aquarium::aspects::aspect#eql?()","aquarium::aspects::joinpoint#eql?()","aquarium::aspects::joinpoint::context#eql?()","aquarium::aspects::pointcut#eql?()","aquarium::finders::finderresult#eql?()","aquarium::utils::aquarium::utils::aquarium::utils::nilobject#eql?()","set#eql?()","aquarium::extensions::hashhelper#eql_when_keys_compared?()","aquarium::extensions::hashhelper#equivalent_key()","aquarium::utils::htmlescaper::escape()","aquarium::utils::htmlescaper#escape()","aquarium::aspects::joinpoint#exists?()","aquarium::finders::methodfinder#find()","aquarium::finders::pointcutfinder#find()","aquarium::finders::typefinder#find()","aquarium::utils::methodutils::find_method()","aquarium::aspects::pointcut#finish_specification_initialization()","aquarium::finders::pointcutfinder::poincutfinderresult#found_pointcuts()","aquarium::invarcond#good_action()","aquarium::invarcondexample#good_action()","aquarium::aspects::advicechainnode#handle_call_rescue()","aquarium::utils::methodutils::has_method()","aquarium::utils::optionsutils#hashify()","aquarium::utils::typeutils::ignore_warning()","aquarium::finders::methodfinder::init_method_options()","aquarium::aspects::pointcut#init_methods_specification()","aquarium::utils::optionsutils#init_specification()","aquarium::aspects::aspect#inspect()","aquarium::aspects::joinpoint#inspect()","aquarium::aspects::joinpoint::context#inspect()","aquarium::aspects::pointcut#inspect()","aquarium::finders::finderresult#inspect()","aquarium::aspects::joinpoint#instance_method()","aquarium::aspects::joinpoint#instance_method?()","aquarium::aspects::pointcut#intersection()","aquarium::extensions::hashhelper#intersection()","aquarium::finders::finderresult#intersection()","set#intersection_using_eql_comparison()","aquarium::typefinderintroductionexamplemodule#introduced_method()","aquarium::extras::designbycontract#invariant()","aquarium::aspects::advicechainnode#invoke_original_join_point()","aquarium::aspects::joinpoint#invoke_original_join_point()","aquarium::aspects::joinpoint::context#invoke_original_join_point()","aquarium::aspects::exclusionhandler#is_excluded_join_point?()","aquarium::aspects::exclusionhandler#is_excluded_method?()","aquarium::aspects::exclusionhandler#is_excluded_pointcut?()","aquarium::aspects::exclusionhandler#is_excluded_type_or_object?()","aquarium::aspects::exclusionhandler#is_explicitly_excluded_method?()","aquarium::finders::methodfinder::is_recognized_method_option()","aquarium::utils::typeutils::is_type?()","aquarium::aspects::exclusionhandler#join_point_excluded?()","aquarium::aspects::aspect#join_points_matched()","aquarium::aspects::aspect#join_points_not_matched()","aquarium::aspects::advice::kinds()","aquarium::aspects::advicechainnode#last()","aquarium::logmodule#log()","aquarium::echo#logged_messages()","aquarium::logmodule#logged_messages()","aquarium::utils::defaultlogger::logger()","aquarium::utils::defaultlogger::logger=()","aquarium::utils::arrayutils#make_array()","aquarium::utils::arrayutils::make_array()","aquarium::aspects::pointcut::make_attribute_reading_writing_options()","aquarium::utils::hashutils#make_hash()","aquarium::aspects::advicechainnodefactory::make_node()","aquarium::utils::setutils#make_set()","aquarium::utils::nameutils::make_type_or_object_key()","aquarium::utils::nameutils::make_valid_attr_name_from_method_name()","aquarium::utils::nameutils::make_valid_object_id_name()","aquarium::utils::nameutils::make_valid_object_name()","aquarium::utils::nameutils::make_valid_type_name()","aquarium::aspects::pointcut#match_all_methods()","aquarium::finders::finderresult#matched_keys()","aquarium::aspects::exclusionhandler#matches_excluded_method_regex?()","aquarium::utils::methodutils::method_args_to_hash()","aquarium::echo#method_missing()","aquarium::utils::aquarium::utils::aquarium::utils::nilobject#method_missing()","aquarium::extensions::hashhelper#minus()","aquarium::finders::finderresult#minus()","aquarium::utils::typeutils::nested()","aquarium::aspects::advicechainnode::new()","aquarium::aspects::afteradvicechainnode::new()","aquarium::aspects::afterraisingadvicechainnode::new()","aquarium::aspects::afterreturningadvicechainnode::new()","aquarium::aspects::aroundadvicechainnode::new()","aquarium::aspects::aspect::new()","aquarium::aspects::beforeadvicechainnode::new()","aquarium::aspects::joinpoint::new()","aquarium::aspects::joinpoint::context::new()","aquarium::aspects::noadvicechainnode::new()","aquarium::aspects::pointcut::new()","aquarium::barmodule::new()","aquarium::classwithstateandbehavior::new()","aquarium::extras::designbycontract::contracterror::new()","aquarium::finders::finderresult::new()","aquarium::foo::new()","aquarium::invarcond::new()","aquarium::invarcondexample::new()","aquarium::utils::invalidoptions::new()","aquarium::utils::logicerror::new()","aquarium::aspects::pointcut#no_attributes_specified?()","aquarium::aspects::pointcut#no_methods_specified?()","aquarium::finders::finderresult#not_matched_keys()","aquarium::aspects::pointcut#or()","aquarium::extensions::hashhelper#or()","aquarium::finders::finderresult#or()","aquarium::dslmethods#pointcut()","aquarium::extras::designbycontract#postcondition()","aquarium::extras::designbycontract#precondition()","aquarium::aspects::joinpoint#proceed()","aquarium::aspects::joinpoint::context#proceed()","aquarium::raiser#raise_exception1()","aquarium::raiser#raise_exception2()","aquarium::reusables::tracemethods::reset_advice_invoked()","aquarium::aspects::advicechainnode#reset_current_context()","aquarium::aspects::joinpoint#resolve_type()","aquarium::echo#respond_to?()","aquarium::utils::typeutils::responds_to_ancestors?()","aquarium::aspects::exclusionhandler#set_calculated_excluded_pointcuts()","aquarium::aspects::advicechainnode#size()","aquarium::aspects::advice::sort_by_priority_order()","aquarium::extensions::regexphelper#strip()","aquarium::utils::arrayutils::strip_array_nils()","aquarium::utils::arrayutils#strip_array_nils()","aquarium::utils::hashutils#strip_nil_keys()","aquarium::utils::setutils#strip_set_nils()","aquarium::utils::setutils::strip_set_nils()","aquarium::aspects::joinpoint#target_type_or_object()","aquarium::utils::camelcase#to_camel_case()","aquarium::utils::methodutils::to_name()","aquarium::aspects::aspect#to_s()","aquarium::aspects::joinpoint#to_s()","aquarium::aspects::joinpoint::context#to_s()","aquarium::aspects::pointcut#to_s()","aquarium::finders::finderresult#to_s()","aquarium::utils::camelcase#to_snake_case()","aquarium::aspects::joinpoint#type_or_object()","aquarium::aspects::aspect#unadvise()","aquarium::aspects::aspect#unadvise_join_points()","aquarium::aspects::pointcut#union()","aquarium::extensions::hashhelper#union()","aquarium::finders::finderresult#union()","set#union_using_eql_comparison()","aquarium::utils::optionsutils::universal_options()","aquarium::utils::optionsutils::universal_prepositions()","aquarium::aspects::joinpoint::context#update()","aquarium::aspects::advicechainnode#update_current_context()","aquarium::aspects::defaultobjectshandler#use_default_objects_if_defined()","aquarium::utils::typeutils::use_underscore_methods?()","aquarium::aspects::advicechainnodefactory::valid()","aquarium::aspects::pointcut::validate_attribute_options()","aquarium::utils::optionsutils#validate_options()","aquarium::utils::methodutils::visibility()","aquarium::aspects::pointcut#|()","aquarium::extensions::hashhelper#|()","aquarium::finders::finderresult#|()","","","",""],"info":[["Aquarium","","Aquarium.html","","<p>Example demonstrating emerging ideas about good aspect-oriented design. Specifically, this  example follows …\n"],["Aquarium::Aspects","","Aquarium/Aspects.html","","<p>Backwards compatibility with old name. (Deprecated)\n"],["Aquarium::Aspects::Advice","","Aquarium/Aspects/Advice.html","",""],["Aquarium::Aspects::AdviceChainNode","","Aquarium/Aspects/AdviceChainNode.html","","<p>Supports Enumerable, but not the sorting methods, as this class is a linked list structure. This is of …\n"],["Aquarium::Aspects::AdviceChainNodeFactory","","Aquarium/Aspects/AdviceChainNodeFactory.html","","<p>The advice_kind argument must be one of the values returned by Advice.kinds or one of the special values …\n"],["Aquarium::Aspects::AfterAdviceChainNode","","Aquarium/Aspects/AfterAdviceChainNode.html","",""],["Aquarium::Aspects::AfterRaisingAdviceChainNode","","Aquarium/Aspects/AfterRaisingAdviceChainNode.html","","<p>Note that the advice is not invoked if the exception is not of a type specified when the advice was created. …\n"],["Aquarium::Aspects::AfterReturningAdviceChainNode","","Aquarium/Aspects/AfterReturningAdviceChainNode.html","",""],["Aquarium::Aspects::AroundAdviceChainNode","","Aquarium/Aspects/AroundAdviceChainNode.html","",""],["Aquarium::Aspects::Aspect","","Aquarium/Aspects/Aspect.html","","<p>Aspect\n<p>Aspect “advises” one or more method invocations for one or more types or objects (including …\n"],["Aquarium::Aspects::BeforeAdviceChainNode","","Aquarium/Aspects/BeforeAdviceChainNode.html","",""],["Aquarium::Aspects::DSL","","Aquarium/Aspects/DSL.html","",""],["Aquarium::Aspects::DSL::AspectDSL","","Aquarium/Aspects/DSL/AspectDSL.html","",""],["Aquarium::Aspects::DefaultObjectsHandler","","Aquarium/Aspects/DefaultObjectsHandler.html","","<p>Some classes support a <code>:default_objects</code> option and use it if no type or object is specified. In other …\n"],["Aquarium::Aspects::ExclusionHandler","","Aquarium/Aspects/ExclusionHandler.html","","<p>Defines methods shared by several classes that take <code>:exclude_*</code> arguments.\n"],["Aquarium::Aspects::JoinPoint","","Aquarium/Aspects/JoinPoint.html","","<p>JoinPoint\n<p>Encapsulates information about a Join Point that might be advised. JoinPoint objects are <em>almost</em> …\n"],["Aquarium::Aspects::JoinPoint::Context","","Aquarium/Aspects/JoinPoint/Context.html","","<p>JoinPoint::Context\n<p>Encapsulates current runtime context information for a join point, such as the values …\n"],["Aquarium::Aspects::JoinPoint::ContextNotCorrectlyDefined","","Aquarium/Aspects/JoinPoint/ContextNotCorrectlyDefined.html","",""],["Aquarium::Aspects::JoinPoint::ProceedMethodNotAvailable","","Aquarium/Aspects/JoinPoint/ProceedMethodNotAvailable.html","",""],["Aquarium::Aspects::NoAdviceChainNode","","Aquarium/Aspects/NoAdviceChainNode.html","","<p>When invoking the original method, we use object.send(original_method_name, *args) rather than object.method …\n"],["Aquarium::Aspects::Pointcut","","Aquarium/Aspects/Pointcut.html","","<p>Pointcut\n<p>Pointcuts are queries on JoinPoints combined with binding of context data to that will be useful …\n"],["Aquarium::Bar","","Aquarium/Bar.html","",""],["Aquarium::BarModule","","Aquarium/BarModule.html","",""],["Aquarium::ClassWithStateAndBehavior","","Aquarium/ClassWithStateAndBehavior.html","",""],["Aquarium::DSL","","Aquarium/DSL.html","","<p>Include this module to add convenience class-level methods to a type, which provide  a low-level AOP …\n"],["Aquarium::DSLMethods","","Aquarium/DSLMethods.html","",""],["Aquarium::Echo","","Aquarium/Echo.html","",""],["Aquarium::Exception1","","Aquarium/Exception1.html","",""],["Aquarium::Exception2","","Aquarium/Exception2.html","",""],["Aquarium::Extensions","","Aquarium/Extensions.html","",""],["Aquarium::Extensions::HashHelper","","Aquarium/Extensions/HashHelper.html","",""],["Aquarium::Extensions::RegexpHelper","","Aquarium/Extensions/RegexpHelper.html","",""],["Aquarium::Extras","","Aquarium/Extras.html","","<p>Extras\n<p>These modules are <em>not</em> included automatically when you <code>require &#39;aquarium&#39;</code>. You have to include …\n"],["Aquarium::Extras::DesignByContract","","Aquarium/Extras/DesignByContract.html","","<p>A simple Design by Contract module. Adds advice to test that the contract, which is specified with a …\n"],["Aquarium::Extras::DesignByContract::ContractError","","Aquarium/Extras/DesignByContract/ContractError.html","",""],["Aquarium::Finders","","Aquarium/Finders.html","",""],["Aquarium::Finders::FinderResult","","Aquarium/Finders/FinderResult.html","","<p>FinderResult\n<p>Wraps hashes that hold the results of various *Finder utilities. The #not_matched method …\n"],["Aquarium::Finders::MethodFinder","","Aquarium/Finders/MethodFinder.html","","<p>MethodFinder\n<p>Locate methods in specified types or objects.\n"],["Aquarium::Finders::PointcutFinder","","Aquarium/Finders/PointcutFinder.html","","<p>PointcutFinder\n<p>Locate named pointcuts in specified types or objects.\n"],["Aquarium::Finders::PointcutFinder::PoincutFinderResult","","Aquarium/Finders/PointcutFinder/PoincutFinderResult.html","",""],["Aquarium::Finders::TypeFinder","","Aquarium/Finders/TypeFinder.html","","<p>TypeFinder\n<p>Locate types.\n"],["Aquarium::Finders::TypeFinder::TypeFinderResult","","Aquarium/Finders/TypeFinder/TypeFinderResult.html","",""],["Aquarium::Foo","","Aquarium/Foo.html","",""],["Aquarium::InvarCond","","Aquarium/InvarCond.html","",""],["Aquarium::InvarCondExample","","Aquarium/InvarCondExample.html","",""],["Aquarium::LogModule","","Aquarium/LogModule.html","",""],["Aquarium::NewException","","Aquarium/NewException.html","",""],["Aquarium::PostCond","","Aquarium/PostCond.html","",""],["Aquarium::PostCondExample","","Aquarium/PostCondExample.html","",""],["Aquarium::PreCond","","Aquarium/PreCond.html","",""],["Aquarium::PreCondExample","","Aquarium/PreCondExample.html","",""],["Aquarium::Raiser","","Aquarium/Raiser.html","",""],["Aquarium::Reusables","","Aquarium/Reusables.html","",""],["Aquarium::Reusables::TraceMethods","","Aquarium/Reusables/TraceMethods.html","",""],["Aquarium::TypeFinderIntroductionExampleModule","","Aquarium/TypeFinderIntroductionExampleModule.html","",""],["Aquarium::TypeFinderIntroductionExampleTargetClass1","","Aquarium/TypeFinderIntroductionExampleTargetClass1.html","",""],["Aquarium::TypeFinderIntroductionExampleTargetClass2","","Aquarium/TypeFinderIntroductionExampleTargetClass2.html","",""],["Aquarium::TypeFinderIntroductionExampleTargetModule1","","Aquarium/TypeFinderIntroductionExampleTargetModule1.html","",""],["Aquarium::TypeFinderIntroductionExampleTargetModule2","","Aquarium/TypeFinderIntroductionExampleTargetModule2.html","",""],["Aquarium::Utils","","Aquarium/Utils.html","",""],["Aquarium::Utils::Aquarium","","Aquarium/Utils/Aquarium.html","",""],["Aquarium::Utils::Aquarium::Utils","","Aquarium/Utils/Aquarium/Utils.html","",""],["Aquarium::Utils::Aquarium::Utils::Aquarium","","Aquarium/Utils/Aquarium/Utils/Aquarium.html","",""],["Aquarium::Utils::Aquarium::Utils::Aquarium::Utils","","Aquarium/Utils/Aquarium/Utils/Aquarium/Utils.html","",""],["Aquarium::Utils::Aquarium::Utils::Aquarium::Utils::NilObject","","Aquarium/Utils/Aquarium/Utils/Aquarium/Utils/NilObject.html","","<p>An implementation of the Null Object Pattern (renamed “Nil” for Ruby). All methods not defined …\n"],["Aquarium::Utils::ArrayUtils","","Aquarium/Utils/ArrayUtils.html","",""],["Aquarium::Utils::CamelCase","","Aquarium/Utils/CamelCase.html","",""],["Aquarium::Utils::DefaultLogger","","Aquarium/Utils/DefaultLogger.html","","<p>DefaultLogger holds the Aquarium-wide “default” Ruby standard library logger. Individual objects …\n"],["Aquarium::Utils::HashUtils","","Aquarium/Utils/HashUtils.html","",""],["Aquarium::Utils::HtmlEscaper","","Aquarium/Utils/HtmlEscaper.html","",""],["Aquarium::Utils::InvalidOptions","","Aquarium/Utils/InvalidOptions.html","","<p>Invalid Options\n<p>The exception thrown when invalid options to any API methods are detected.\n"],["Aquarium::Utils::LogicError","","Aquarium/Utils/LogicError.html","",""],["Aquarium::Utils::MethodUtils","","Aquarium/Utils/MethodUtils.html","",""],["Aquarium::Utils::NameUtils","","Aquarium/Utils/NameUtils.html","","<p>NameUtils\n<p>Convert various strings, symbols, object ids, etc. into valid “names” that can be …\n"],["Aquarium::Utils::OptionsUtils","","Aquarium/Utils/OptionsUtils.html","","<p>OptionsUtils\n<p>Support parsing and processing of key-value pairs of options, where the values are always …\n"],["Aquarium::Utils::OptionsUtils::ClassMethods","","Aquarium/Utils/OptionsUtils/ClassMethods.html","",""],["Aquarium::Utils::SetUtils","","Aquarium/Utils/SetUtils.html","",""],["Aquarium::Utils::TypeUtils","","Aquarium/Utils/TypeUtils.html","",""],["Aquarium::VERSION","","Aquarium/VERSION.html","",""],["Hash","","Hash.html","",""],["NotTraced1","","NotTraced1.html","",""],["NotTraced2","","NotTraced2.html","",""],["Object","","Object.html","","<p>Add the Aquarium::DSL convenience methods to Object. Only require this file if you <em>really</em> want these …\n"],["Regexp","","Regexp.html","",""],["Set","","Set.html","","<p>Override #== to fix behavior where it seems to ignore overrides of Object#== or Object#eql? when comparing …\n"],["Traced1","","Traced1.html","",""],["Traced2","","Traced2.html","",""],["&","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-26","(pointcut2)",""],["&","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-26","(other_hash)",""],["&","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-26","(other_result)",""],["-","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-2D","(other_hash)",""],["-","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-2D","(other_result)",""],["<<","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-3C-3C","(other_result)",""],["<=>","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-3C-3D-3E","(other)",""],["<=>","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-3C-3D-3E","(other)",""],["<=>","Aquarium::Extensions::RegexpHelper","Aquarium/Extensions/RegexpHelper.html#method-i-3C-3D-3E","(other)",""],["==","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-3D-3D","(other)",""],["==","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-3D-3D","(other)",""],["==","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-3D-3D","(other)",""],["==","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-3D-3D","(other)",""],["==","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-3D-3D","(other)",""],["==","Set","Set.html#method-i-3D-3D","(set)",""],["===","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-3D-3D-3D","(other)",""],["===","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-3D-3D-3D","(other)",""],["action","Aquarium::PostCond","Aquarium/PostCond.html#method-i-action","(*args)",""],["action","Aquarium::PostCondExample","Aquarium/PostCondExample.html#method-i-action","(*args)",""],["action","Aquarium::PreCond","Aquarium/PreCond.html#method-i-action","(*args)",""],["action","Aquarium::PreCondExample","Aquarium/PreCondExample.html#method-i-action","(*args)",""],["add_ancestors_descendents_and_nested_option_variants_for","Aquarium::Finders::TypeFinder","Aquarium/Finders/TypeFinder.html#method-c-add_ancestors_descendents_and_nested_option_variants_for","(option, options_hash)",""],["add_exclude_options_for","Aquarium::Utils::OptionsUtils::ClassMethods","Aquarium/Utils/OptionsUtils/ClassMethods.html#method-i-add_exclude_options_for","(option, options_hash)","<p>Service method that adds a new canonical option and corresponding array with  “exclude_” prepended …\n"],["add_prepositional_option_variants_for","Aquarium::Utils::OptionsUtils::ClassMethods","Aquarium/Utils/OptionsUtils/ClassMethods.html#method-i-add_prepositional_option_variants_for","(option, options_hash)","<p>Service method that adds a new canonical option and corresponding array with  “preposition” …\n"],["advice_invoked?","Aquarium::Reusables::TraceMethods","Aquarium/Reusables/TraceMethods.html#method-c-advice_invoked-3F","()",""],["advice_wrapper","Aquarium::Aspects::AfterAdviceChainNode","Aquarium/Aspects/AfterAdviceChainNode.html#method-i-advice_wrapper","(jp)",""],["advice_wrapper","Aquarium::Aspects::AfterRaisingAdviceChainNode","Aquarium/Aspects/AfterRaisingAdviceChainNode.html#method-i-advice_wrapper","(jp)",""],["advice_wrapper","Aquarium::Aspects::AfterReturningAdviceChainNode","Aquarium/Aspects/AfterReturningAdviceChainNode.html#method-i-advice_wrapper","(jp)",""],["advice_wrapper","Aquarium::Aspects::AroundAdviceChainNode","Aquarium/Aspects/AroundAdviceChainNode.html#method-i-advice_wrapper","(jp)",""],["advice_wrapper","Aquarium::Aspects::BeforeAdviceChainNode","Aquarium/Aspects/BeforeAdviceChainNode.html#method-i-advice_wrapper","(jp)",""],["advice_wrapper","Aquarium::Aspects::NoAdviceChainNode","Aquarium/Aspects/NoAdviceChainNode.html#method-i-advice_wrapper","(jp)",""],["advise","Aquarium::DSLMethods","Aquarium/DSLMethods.html#method-i-advise","(*options, &block)",""],["all_excluded_pointcuts","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-all_excluded_pointcuts","()",""],["all_methods_specified?","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-all_methods_specified-3F","()",""],["all_recognized_method_option_symbols","Aquarium::Finders::MethodFinder","Aquarium/Finders/MethodFinder.html#method-c-all_recognized_method_option_symbols","()",""],["and","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-and","(pointcut2)",""],["and","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-and","(other_hash)",""],["and","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-and","(other_result)","<p>“And” two results together\n"],["any_type_related_options_given?","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-any_type_related_options_given-3F","()",""],["append_features","Aquarium::Aspects::DSL::AspectDSL","Aquarium/Aspects/DSL/AspectDSL.html#method-c-append_features","(clazz)","<p>Add the methods as class, not instance, methods.\n"],["append_features","Aquarium::DSL","Aquarium/DSL.html#method-c-append_features","(clazz)","<p>Add the methods as class, not instance, methods.\n"],["append_features","Aquarium::Reusables::TraceMethods","Aquarium/Reusables/TraceMethods.html#method-c-append_features","(mod)",""],["append_features","Aquarium::Utils::OptionsUtils","Aquarium/Utils/OptionsUtils.html#method-c-append_features","(clazz)",""],["append_matched","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-append_matched","(other_hash = {})",""],["append_not_matched","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-append_not_matched","(other_hash = {})",""],["assert_valid","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-assert_valid","(options, error_message = \"\")","<p>Since JoinPoints can be declared for non-existent methods, tolerate “nil” for the visibility. …\n"],["bad_action","Aquarium::InvarCond","Aquarium/InvarCond.html#method-i-bad_action","()",""],["bad_action","Aquarium::InvarCondExample","Aquarium/InvarCondExample.html#method-i-bad_action","()",""],["bad_attributes","Object","Object.html#method-i-bad_attributes","(message, options)",""],["boolean_compare","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-boolean_compare","(b1, b2)",""],["build_tag","Aquarium::VERSION","Aquarium/VERSION.html#method-c-build_tag","()",""],["call","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-call","(jp)",""],["call_advice","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-call_advice","(jp)","<p>Bug #19262 workaround: need to only pass jp argument if arity is 1.\n"],["canonical_option_accessor","Aquarium::Utils::OptionsUtils::ClassMethods","Aquarium/Utils/OptionsUtils/ClassMethods.html#method-i-canonical_option_accessor","(*canonical_option_key_list)",""],["canonical_option_reader","Aquarium::Utils::OptionsUtils::ClassMethods","Aquarium/Utils/OptionsUtils/ClassMethods.html#method-i-canonical_option_reader","(*canonical_option_key_list)",""],["canonical_option_writer","Aquarium::Utils::OptionsUtils::ClassMethods","Aquarium/Utils/OptionsUtils/ClassMethods.html#method-i-canonical_option_writer","(*canonical_option_key_list)",""],["canonical_options_given_methods","Aquarium::Utils::OptionsUtils::ClassMethods","Aquarium/Utils/OptionsUtils/ClassMethods.html#method-i-canonical_options_given_methods","(canonical_options)",""],["class_method?","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-class_method-3F","()",""],["class_or_instance_method_flag","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-class_or_instance_method_flag","()",""],["compare_advice_kinds","Aquarium::Aspects::Advice","Aquarium/Aspects/Advice.html#method-c-compare_advice_kinds","(kind1, kind2)",""],["compare_field","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-compare_field","(field_reader, other)",""],["convert_to_set","Aquarium::Utils::SetUtils","Aquarium/Utils/SetUtils.html#method-i-convert_to_set","(*value_or_set_or_array)",""],["debug_backtraces","Aquarium::Aspects::Advice","Aquarium/Aspects/Advice.html#method-c-debug_backtraces","()",""],["debug_backtraces=","Aquarium::Aspects::Advice","Aquarium/Aspects/Advice.html#method-c-debug_backtraces-3D","( val )",""],["default_objects_given","Aquarium::Aspects::DefaultObjectsHandler","Aquarium/Aspects/DefaultObjectsHandler.html#method-i-default_objects_given","()",""],["default_objects_given?","Aquarium::Aspects::DefaultObjectsHandler","Aquarium/Aspects/DefaultObjectsHandler.html#method-i-default_objects_given-3F","()",""],["definer","Aquarium::Utils::MethodUtils","Aquarium/Utils/MethodUtils.html#method-c-definer","(type_or_instance, method_sym, class_or_instance_only = nil)","<p>Which type in a hierarchy actually defines a method?\n"],["descendents","Aquarium::Utils::TypeUtils","Aquarium/Utils/TypeUtils.html#method-c-descendents","(clazz)",""],["disable_all","Aquarium::Extras::DesignByContract","Aquarium/Extras/DesignByContract.html#method-c-disable_all","()","<p>Disable creation of any subsequent contracts and disable execution of existing contracts. That is, while …\n"],["do_descendents","Aquarium::Utils::TypeUtils","Aquarium/Utils/TypeUtils.html#method-c-do_descendents","(clazz, visiting_module, visited, result)","<p>For JRuby classes, we have to “__x__” forms of the reflection methods that don&#39;t end in …\n"],["do_it","Aquarium::Foo","Aquarium/Foo.html#method-i-do_it","(*args)",""],["do_something_else","Aquarium::BarModule","Aquarium/BarModule.html#method-i-do_something_else","(*args)",""],["doit","NotTraced1","NotTraced1.html#method-i-doit","()",""],["doit","NotTraced2","NotTraced2.html#method-i-doit","()",""],["doit","Traced1","Traced1.html#method-i-doit","()",""],["doit","Traced2","Traced2.html#method-i-doit","()",""],["dup","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-dup","()",""],["each","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-each","()","<p>Supports Enumerable\n"],["each","Aquarium::Finders::TypeFinder::TypeFinderResult","Aquarium/Finders/TypeFinder/TypeFinderResult.html#method-i-each","()",""],["empty?","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-empty-3F","()",""],["empty?","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-empty-3F","()",""],["empty?","Aquarium::Extensions::RegexpHelper","Aquarium/Extensions/RegexpHelper.html#method-i-empty-3F","()",""],["empty?","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-empty-3F","()","<p>Were there no matches?\n"],["enable_all","Aquarium::Extras::DesignByContract","Aquarium/Extras/DesignByContract.html#method-c-enable_all","()","<p>Enable creation and execution of contracts\n"],["eql?","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-eql-3F","(other)","<p>We have to ignore advice in the comparison. As recently discussed in ruby-users, there are very few situations. …\n"],["eql?","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-eql-3F","(other)",""],["eql?","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-eql-3F","(other)",""],["eql?","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-eql-3F","(other)","<p>Two Considered equivalent only if the same join points matched and not_matched sets are equal,  the specifications …\n"],["eql?","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-eql-3F","(other)",""],["eql?","Aquarium::Utils::Aquarium::Utils::Aquarium::Utils::NilObject","Aquarium/Utils/Aquarium/Utils/Aquarium/Utils/NilObject.html#method-i-eql-3F","(other)",""],["eql?","Set","Set.html#method-i-eql-3F","(set)",""],["eql_when_keys_compared?","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-eql_when_keys_compared-3F","(other)","<p>It appears that Hash#== uses Object#== (i.e., self.object_id == other.object_id) when comparing hash …\n"],["equivalent_key","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-equivalent_key","(key)",""],["escape","Aquarium::Utils::HtmlEscaper","Aquarium/Utils/HtmlEscaper.html#method-c-escape","(message)",""],["escape","Aquarium::Utils::HtmlEscaper","Aquarium/Utils/HtmlEscaper.html#method-i-escape","(message)",""],["exists?","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-exists-3F","()",""],["find","Aquarium::Finders::MethodFinder","Aquarium/Finders/MethodFinder.html#method-i-find","(options = {})","<p>Returns a Aquarium::Finders::FinderResult, where the “matched” keys are the input  types, type …\n"],["find","Aquarium::Finders::PointcutFinder","Aquarium/Finders/PointcutFinder.html#method-i-find","(options = {})","<p>Returns a Aquarium::Finders::FinderResult, where the “matched” keys are the input  types, type …\n"],["find","Aquarium::Finders::TypeFinder","Aquarium/Finders/TypeFinder.html#method-i-find","(options = {})","<p>Returns a TypeFinder::TypeFinderResult, where the “matched” keys are the input  types, type …\n"],["find_method","Aquarium::Utils::MethodUtils","Aquarium/Utils/MethodUtils.html#method-c-find_method","(type_or_instance, method_sym, class_or_instance_only = nil, include_ancestors = true)",""],["finish_specification_initialization","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-finish_specification_initialization","()",""],["found_pointcuts","Aquarium::Finders::PointcutFinder::PoincutFinderResult","Aquarium/Finders/PointcutFinder/PoincutFinderResult.html#method-i-found_pointcuts","()","<p>Return an array with the found pointcuts.\n"],["good_action","Aquarium::InvarCond","Aquarium/InvarCond.html#method-i-good_action","()",""],["good_action","Aquarium::InvarCondExample","Aquarium/InvarCondExample.html#method-i-good_action","()",""],["handle_call_rescue","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-handle_call_rescue","(ex, error_message_prefix, jp)",""],["has_method","Aquarium::Utils::MethodUtils","Aquarium/Utils/MethodUtils.html#method-c-has_method","(type_or_instance, method_sym, class_or_instance_only = nil, include_ancestors = true)",""],["hashify","Aquarium::Utils::OptionsUtils","Aquarium/Utils/OptionsUtils.html#method-i-hashify","(options)",""],["ignore_warning","Aquarium::Utils::TypeUtils","Aquarium/Utils/TypeUtils.html#method-c-ignore_warning","()",""],["init_method_options","Aquarium::Finders::MethodFinder","Aquarium/Finders/MethodFinder.html#method-c-init_method_options","(scope_options_set)",""],["init_methods_specification","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-init_methods_specification","()",""],["init_specification","Aquarium::Utils::OptionsUtils","Aquarium/Utils/OptionsUtils.html#method-i-init_specification","(options, canonical_options, additional_allowed_options = [])","<p>Class #initialize methods call this method to process the input options. Pass an optional block to the …\n"],["inspect","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-inspect","()",""],["inspect","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-inspect","()","<p>todo: restore context output.\n"],["inspect","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-inspect","()",""],["inspect","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-inspect","()",""],["inspect","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-inspect","()",""],["instance_method","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-instance_method","()",""],["instance_method?","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-instance_method-3F","()",""],["intersection","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-intersection","(pointcut2)",""],["intersection","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-intersection","(other_hash)",""],["intersection","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-intersection","(other_result)",""],["intersection_using_eql_comparison","Set","Set.html#method-i-intersection_using_eql_comparison","(other)","<p>It seems that Set#&amp; should work, but for some reason, it doesn&#39;t.\n"],["introduced_method","Aquarium::TypeFinderIntroductionExampleModule","Aquarium/TypeFinderIntroductionExampleModule.html#method-i-introduced_method","()",""],["invariant","Aquarium::Extras::DesignByContract","Aquarium/Extras/DesignByContract.html#method-i-invariant","(*args, &contract_block)",""],["invoke_original_join_point","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-invoke_original_join_point","(current_jp)",""],["invoke_original_join_point","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-invoke_original_join_point","(*args, &block)","<p>Invoke the join point itself, skipping any intermediate advice. This method can only be called if the …\n"],["invoke_original_join_point","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-invoke_original_join_point","(enclosing_join_point, *args, &block)",""],["is_excluded_join_point?","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-is_excluded_join_point-3F","(jp)","<p>Using @specification.include?(jp) doesn&#39;t always work correctly (it probably uses equal?())!\n"],["is_excluded_method?","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-is_excluded_method-3F","(method)",""],["is_excluded_pointcut?","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-is_excluded_pointcut-3F","(jp)",""],["is_excluded_type_or_object?","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-is_excluded_type_or_object-3F","(type_or_object)",""],["is_explicitly_excluded_method?","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-is_explicitly_excluded_method-3F","(method)",""],["is_recognized_method_option","Aquarium::Finders::MethodFinder","Aquarium/Finders/MethodFinder.html#method-c-is_recognized_method_option","(string_or_symbol)",""],["is_type?","Aquarium::Utils::TypeUtils","Aquarium/Utils/TypeUtils.html#method-c-is_type-3F","(type_or_object)",""],["join_point_excluded?","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-join_point_excluded-3F","(jp)",""],["join_points_matched","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-join_points_matched","()",""],["join_points_not_matched","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-join_points_not_matched","()",""],["kinds","Aquarium::Aspects::Advice","Aquarium/Aspects/Advice.html#method-c-kinds","()",""],["last","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-last","()",""],["log","Aquarium::LogModule","Aquarium/LogModule.html#method-i-log","(message)",""],["logged_messages","Aquarium::Echo","Aquarium/Echo.html#method-i-logged_messages","()",""],["logged_messages","Aquarium::LogModule","Aquarium/LogModule.html#method-i-logged_messages","()",""],["logger","Aquarium::Utils::DefaultLogger","Aquarium/Utils/DefaultLogger.html#method-c-logger","()",""],["logger=","Aquarium::Utils::DefaultLogger","Aquarium/Utils/DefaultLogger.html#method-c-logger-3D","(logger)",""],["make_array","Aquarium::Utils::ArrayUtils","Aquarium/Utils/ArrayUtils.html#method-i-make_array","(*value_or_enum)","<p>Return an array containing the input item or list of items. If the input is an array, it is returned. …\n"],["make_array","Aquarium::Utils::ArrayUtils","Aquarium/Utils/ArrayUtils.html#method-c-make_array","(*value_or_enum)",""],["make_attribute_reading_writing_options","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-c-make_attribute_reading_writing_options","(options_hash)",""],["make_hash","Aquarium::Utils::HashUtils","Aquarium/Utils/HashUtils.html#method-i-make_hash","(item_or_array_or_hash)","<p>Convert the input item or array into a hash with a nil value or the result of evaluating the optional …\n"],["make_node","Aquarium::Aspects::AdviceChainNodeFactory","Aquarium/Aspects/AdviceChainNodeFactory.html#method-c-make_node","(options = {})",""],["make_set","Aquarium::Utils::SetUtils","Aquarium/Utils/SetUtils.html#method-i-make_set","(*value_or_set_or_array)","<p>Return a set containing the input item or list of items. If the input is a set or an array, it is returned. …\n"],["make_type_or_object_key","Aquarium::Utils::NameUtils","Aquarium/Utils/NameUtils.html#method-c-make_type_or_object_key","(type_or_object)",""],["make_valid_attr_name_from_method_name","Aquarium::Utils::NameUtils","Aquarium/Utils/NameUtils.html#method-c-make_valid_attr_name_from_method_name","(method_name)",""],["make_valid_object_id_name","Aquarium::Utils::NameUtils","Aquarium/Utils/NameUtils.html#method-c-make_valid_object_id_name","(object_id)","<p>Fixes Tracker #13864.\n"],["make_valid_object_name","Aquarium::Utils::NameUtils","Aquarium/Utils/NameUtils.html#method-c-make_valid_object_name","(type_or_object)",""],["make_valid_type_name","Aquarium::Utils::NameUtils","Aquarium/Utils/NameUtils.html#method-c-make_valid_type_name","(type)",""],["match_all_methods","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-match_all_methods","()",""],["matched_keys","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-matched_keys","()","<p>Convenience method to get the keys for the matches.\n"],["matches_excluded_method_regex?","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-matches_excluded_method_regex-3F","(method)",""],["method_args_to_hash","Aquarium::Utils::MethodUtils","Aquarium/Utils/MethodUtils.html#method-c-method_args_to_hash","(*args)",""],["method_missing","Aquarium::Echo","Aquarium/Echo.html#method-i-method_missing","(sym, *args)",""],["method_missing","Aquarium::Utils::Aquarium::Utils::Aquarium::Utils::NilObject","Aquarium/Utils/Aquarium/Utils/Aquarium/Utils/NilObject.html#method-i-method_missing","(method_sym, *args)",""],["minus","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-minus","(other_hash)",""],["minus","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-minus","(other_result)",""],["nested","Aquarium::Utils::TypeUtils","Aquarium/Utils/TypeUtils.html#method-c-nested","(clazz)",""],["new","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-c-new","(options = {})",""],["new","Aquarium::Aspects::AfterAdviceChainNode","Aquarium/Aspects/AfterAdviceChainNode.html#method-c-new","(options = {})",""],["new","Aquarium::Aspects::AfterRaisingAdviceChainNode","Aquarium/Aspects/AfterRaisingAdviceChainNode.html#method-c-new","(options = {})",""],["new","Aquarium::Aspects::AfterReturningAdviceChainNode","Aquarium/Aspects/AfterReturningAdviceChainNode.html#method-c-new","(options = {})",""],["new","Aquarium::Aspects::AroundAdviceChainNode","Aquarium/Aspects/AroundAdviceChainNode.html#method-c-new","(options = {})",""],["new","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-c-new","(*options, &block)","<p>Aspect.new (:around | :before | :after | :after_returning | :after_raising )\n\n<pre>(:pointcuts =&gt; [...]), :named_pointcuts ...</pre>\n"],["new","Aquarium::Aspects::BeforeAdviceChainNode","Aquarium/Aspects/BeforeAdviceChainNode.html#method-c-new","(options = {})",""],["new","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-c-new","(options = {})","<p>Create a join point object, specifying either one type or one object and a method.  Only method join …\n"],["new","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-c-new","(options = {})",""],["new","Aquarium::Aspects::NoAdviceChainNode","Aquarium/Aspects/NoAdviceChainNode.html#method-c-new","(options = {})","<p>Note that we extract the block passed to the original method call, if any, from the context and pass …\n"],["new","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-c-new","(options = {})","<p>Construct a Pointcut for methods in types or objects.\n\n<pre>Pointcut.new :join_points =&gt; [...] | :type{s} =&gt; ...</pre>\n"],["new","Aquarium::BarModule","Aquarium/BarModule.html#method-c-new","(*args)",""],["new","Aquarium::ClassWithStateAndBehavior","Aquarium/ClassWithStateAndBehavior.html#method-c-new","(*args)",""],["new","Aquarium::Extras::DesignByContract::ContractError","Aquarium/Extras/DesignByContract/ContractError.html#method-c-new","(message)",""],["new","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-c-new","(hash = {})",""],["new","Aquarium::Foo","Aquarium/Foo.html#method-c-new","(*args)",""],["new","Aquarium::InvarCond","Aquarium/InvarCond.html#method-c-new","()",""],["new","Aquarium::InvarCondExample","Aquarium/InvarCondExample.html#method-c-new","()",""],["new","Aquarium::Utils::InvalidOptions","Aquarium/Utils/InvalidOptions.html#method-c-new","(*args)",""],["new","Aquarium::Utils::LogicError","Aquarium/Utils/LogicError.html#method-c-new","(*args)",""],["no_attributes_specified?","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-no_attributes_specified-3F","()",""],["no_methods_specified?","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-no_methods_specified-3F","()",""],["not_matched_keys","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-not_matched_keys","()","<p>Convenience method to get the keys for the items that did not result in matches.\n"],["or","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-or","(pointcut2)",""],["or","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-or","(other_hash)","<p>Union of self with a second hash, which returns a new hash. It&#39;s different from Hash#merge in that …\n"],["or","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-or","(other_result)","<p>“Or” two results together\n"],["pointcut","Aquarium::DSLMethods","Aquarium/DSLMethods.html#method-i-pointcut","(*options, &block)",""],["postcondition","Aquarium::Extras::DesignByContract","Aquarium/Extras/DesignByContract.html#method-i-postcondition","(*args, &contract_block)",""],["precondition","Aquarium::Extras::DesignByContract","Aquarium/Extras/DesignByContract.html#method-i-precondition","(*args, &contract_block)",""],["proceed","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-proceed","(*args, &block)","<p>Invoke the join point itself (which could actually be aspect advice wrapping the original join point… …\n"],["proceed","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-proceed","(enclosing_join_point, *args, &block)",""],["raise_exception1","Aquarium::Raiser","Aquarium/Raiser.html#method-i-raise_exception1","()",""],["raise_exception2","Aquarium::Raiser","Aquarium/Raiser.html#method-i-raise_exception2","()",""],["reset_advice_invoked","Aquarium::Reusables::TraceMethods","Aquarium/Reusables/TraceMethods.html#method-c-reset_advice_invoked","()",""],["reset_current_context","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-reset_current_context","(jp)",""],["resolve_type","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-resolve_type","(options)",""],["respond_to?","Aquarium::Echo","Aquarium/Echo.html#method-i-respond_to-3F","(sym, include_private = false)",""],["responds_to_ancestors?","Aquarium::Utils::TypeUtils","Aquarium/Utils/TypeUtils.html#method-c-responds_to_ancestors-3F","(mod)",""],["set_calculated_excluded_pointcuts","Aquarium::Aspects::ExclusionHandler","Aquarium/Aspects/ExclusionHandler.html#method-i-set_calculated_excluded_pointcuts","(excluded_pointcuts)",""],["size","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-size","()",""],["sort_by_priority_order","Aquarium::Aspects::Advice","Aquarium/Aspects/Advice.html#method-c-sort_by_priority_order","(advice_kinds)",""],["strip","Aquarium::Extensions::RegexpHelper","Aquarium/Extensions/RegexpHelper.html#method-i-strip","()",""],["strip_array_nils","Aquarium::Utils::ArrayUtils","Aquarium/Utils/ArrayUtils.html#method-c-strip_array_nils","(array)","<p>Return a copy of the input array with all nils removed.\n"],["strip_array_nils","Aquarium::Utils::ArrayUtils","Aquarium/Utils/ArrayUtils.html#method-i-strip_array_nils","(array)","<p>Return a copy of the input array with all nils removed.\n"],["strip_nil_keys","Aquarium::Utils::HashUtils","Aquarium/Utils/HashUtils.html#method-i-strip_nil_keys","(hash)",""],["strip_set_nils","Aquarium::Utils::SetUtils","Aquarium/Utils/SetUtils.html#method-i-strip_set_nils","(set)","<p>Return a new set that is a copy of the input set with all nils removed.\n"],["strip_set_nils","Aquarium::Utils::SetUtils","Aquarium/Utils/SetUtils.html#method-c-strip_set_nils","(set)","<p>Return a new set that is a copy of the input set with all nils removed.\n"],["target_type_or_object","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-target_type_or_object","()",""],["to_camel_case","Aquarium::Utils::CamelCase","Aquarium/Utils/CamelCase.html#method-i-to_camel_case","(str)",""],["to_name","Aquarium::Utils::MethodUtils","Aquarium/Utils/MethodUtils.html#method-c-to_name","(string_or_symbol)","<p>The metaprogramming methods such as “public_instance_methods” require strings for 1.8, symbols …\n"],["to_s","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-to_s","()",""],["to_s","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-to_s","()",""],["to_s","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-to_s","()",""],["to_s","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-to_s","()",""],["to_s","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-to_s","()",""],["to_snake_case","Aquarium::Utils::CamelCase","Aquarium/Utils/CamelCase.html#method-i-to_snake_case","(str)",""],["type_or_object","Aquarium::Aspects::JoinPoint","Aquarium/Aspects/JoinPoint.html#method-i-type_or_object","()",""],["unadvise","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-unadvise","()",""],["unadvise_join_points","Aquarium::Aspects::Aspect","Aquarium/Aspects/Aspect.html#method-i-unadvise_join_points","()",""],["union","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-union","(pointcut2)",""],["union","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-union","(other_hash)",""],["union","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-union","(other_result)",""],["union_using_eql_comparison","Set","Set.html#method-i-union_using_eql_comparison","(other)","<p>It seems that Set#| should work, but for some reason, it doesn&#39;t.\n"],["universal_options","Aquarium::Utils::OptionsUtils","Aquarium/Utils/OptionsUtils.html#method-c-universal_options","()",""],["universal_prepositions","Aquarium::Utils::OptionsUtils","Aquarium/Utils/OptionsUtils.html#method-c-universal_prepositions","()",""],["update","Aquarium::Aspects::JoinPoint::Context","Aquarium/Aspects/JoinPoint/Context.html#method-i-update","(options)",""],["update_current_context","Aquarium::Aspects::AdviceChainNode","Aquarium/Aspects/AdviceChainNode.html#method-i-update_current_context","(jp)",""],["use_default_objects_if_defined","Aquarium::Aspects::DefaultObjectsHandler","Aquarium/Aspects/DefaultObjectsHandler.html#method-i-use_default_objects_if_defined","()",""],["use_underscore_methods?","Aquarium::Utils::TypeUtils","Aquarium/Utils/TypeUtils.html#method-c-use_underscore_methods-3F","(mod)",""],["valid","Aquarium::Aspects::AdviceChainNodeFactory","Aquarium/Aspects/AdviceChainNodeFactory.html#method-c-valid","(advice_kind)",""],["validate_attribute_options","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-c-validate_attribute_options","(spec_hash, options_hash)",""],["validate_options","Aquarium::Utils::OptionsUtils","Aquarium/Utils/OptionsUtils.html#method-i-validate_options","(options)",""],["visibility","Aquarium::Utils::MethodUtils","Aquarium/Utils/MethodUtils.html#method-c-visibility","(type_or_instance, method_sym, class_or_instance_only = nil, include_ancestors = true)",""],["|","Aquarium::Aspects::Pointcut","Aquarium/Aspects/Pointcut.html#method-i-7C","(pointcut2)",""],["|","Aquarium::Extensions::HashHelper","Aquarium/Extensions/HashHelper.html#method-i-7C","(other_hash)",""],["|","Aquarium::Finders::FinderResult","Aquarium/Finders/FinderResult.html#method-i-7C","(other_result)",""],["CHANGES","","CHANGES.html","","<p>Version 0.7.3\n<p>(0.7.2 had documentation errors.)\n<p>Removed an ill-advised (if you&#39;ll pardon the expression… …\n"],["MIT_LICENSE","","MIT_LICENSE.html","","<p>Copyright © 2007-2008 The Aquarium Development Team\n<p>Permission is hereby granted, free of charge, to …\n"],["README","","README.html","","<p>Aquarium\n<p>Aquarium is a toolkit for Aspect-Oriented Programming (AOP) whose goals include:\n<p>A powerful “pointcut” …\n"],["UPGRADE","","UPGRADE.html","","<p>Updating to Aquarium-0.7.3\n<p>Version 0.7.3 has only been tested with Ruby 2.7.0, but it should support the …\n"]]}}